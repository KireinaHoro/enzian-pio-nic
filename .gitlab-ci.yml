stages:
  - test
  - build-sw
  - build-hw
  - release

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_FORCE_HTTPS: "true"

.docker-image:
  tags:
    - enzian-docker
    - vivado
  image: "registry.ethz.ch/project-openenzian/ci-images/pionic-tools:latest"

fast-tests:
  extends: .docker-image
  stage: test
  script:
    - mill gen.test -l org.scalatest.tags.Slow -l pionic.tags.Formal

.build-sw:
  extends: .docker-image
  stage: build-sw
  script:
    - mill $PIONIC_DESIGN.generateVerilog
    - make -C sw/$PIONIC_DESIGN

build-sw-pcie:
  extends: .build-sw
  variables:
    PIONIC_DESIGN: pcie

build-sw-eci:
  extends: .build-sw
  variables:
    PIONIC_DESIGN: eci

.build-hw:
  extends: .docker-image
  stage: build-hw
  needs:
    - fast-tests
  before_script:
    - source /opt/Xilinx/Vivado/2023.2/settings64.sh
  script:
    - mill --no-server $PIONIC_DESIGN.generateBitstream
  variables:
    LD_PRELOAD: "/lib/x86_64-linux-gnu/libudev.so.1"
    XILINXD_LICENSE_FILE: "2100@idvm-infk-systems03.inf.ethz.ch:2100@sgv-license-01.ethz.ch"

build-hw-pcie:
  extends: .build-hw
  variables:
    PIONIC_DESIGN: pcie
  artifacts:
    when: always
    paths:
      - out/pcie/vivadoProject.dest/*.log
      - out/pcie/vivadoProject.dest/pio-nic-pcie/pio-nic-pcie.runs/impl_1/pio-nic-pcie.bit
      - out/pcie/vivadoProject.dest/pio-nic-pcie/pio-nic-pcie.runs/impl_1/pio-nic-pcie.ltx
      - out/pcie/vivadoProject.dest/pio-nic-pcie/pio-nic-pcie.runs/impl_1/design_1_wrapper_postroute_physopt.dcp

# # WIP: pull static shell release
# build-hw-eci:
#   extends: .build-hw
#   before_script:
#     - curl <... download static shell dcp ...>
#   variables:
#     PIONIC_DESIGN: eci
#     ENZIAN_SHELL_DIR: <fill in here>
#   artifacts:
#     paths:
#       - out/eci/vivadoProject.dest/shell_pio-nic-eci_routed.dcp
#       - out/eci/vivadoProject.dest/shell_pio-nic-eci.bit
#       - out/eci/vivadoProject.dest/shell_pio-nic-eci.ltx

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - job: build-hw-pcie
      artifacts: true
  script:
    - |
      url() {
        echo https://gitlab.ethz.ch/api/v4/projects/47960/packages/generic/release/$CI_COMMIT_TAG/$1

      }
      upload() {
        curl --fail --user "${PKG_REGISTRY_USER}:${PKG_REGISTRY_KEY}" --upload-file $1/$2 $(url $2)
      }

      asset_links=()

      for artifact_file in pio-nic-pcie.{bit,ltx} design_1_wrapper_postroute_physopt.dcp; do
        upload out/pcie/vivadoProject.dest/pio-nic-pcie/pio-nic-pcie.runs/impl_1 ${artifact_file}
        asset_links+=("--assets-link" "{\"name\":\"${artifact_file}\",\"url\":\"$(url ${artifact_file})\",\"link_type\":\"other\"}")
      done
      
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG "${asset_links[@]}"
      
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Software and hardware artifacts for version $CI_COMMIT_TAG.'
